{"version":3,"sources":["./src/app/app.module.ts","./src/app/app.component.ts","./src/app/drawing-board/drawing-board-component/drawing-board-component.component.ts","./src/app/services/comman.service.ts","./src/app/drawing-board/drawing-board-component/drawing-board-component.component.html","./src/app/tool-bar/tool-bar-component/tool-bar-component.component.ts","./src/app/tool-bar/tool-bar-component/tool-bar-component.component.html","./src/app/layout/board/board.component.ts","./src/app/layout/board/board.component.html","./src/app/app.component.html","./src/app/app-routing.module.ts","./src/app/drawing-board/drawing-board.module.ts","./src/app/tool-bar/tool-bar.module.ts","./src/app/layout/layout.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["AppModule","AppComponent","[object Object]","this","title","DrawingBoardComponentComponent","_commanService","drawType","svgPath","undoPath","svgBoard","document","getElementById","addEventListener","event","penStatus","style","cursor","path","createElementNS","points","drawLine","e","color","globalColor","p","elem","x","y","createSVGPoint","matrixTransform","getScreenCTM","inverse","svgPoint","clientX","clientY","push","toString","setAttributeNS","appendChild","endDraw","removeEventListener","eraserStatus","querySelectorAll","forEach","parentNode","removeChild","CommanService","_l","core","ToolBarComponentComponent","resetAll","_v","en","$event","ad","_co","component","BoardComponent","View_DrawingBoardComponentComponent_0","RenderType_DrawingBoardComponentComponent","View_ToolBarComponentComponent_0","RenderType_ToolBarComponentComponent","_ck","View_BoardComponent_0","RenderType_BoardComponent","AppRoutingModule","DrawingBoardModule","ToolBarModule","LayoutModule","platform_browser","bootstrapModuleFactory","AppModuleNgFactory","catch","err","console","error","webpackEmptyAsyncContext","req","Promise","resolve","then","Error","code","keys","module","exports","id"],"mappings":"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","file":"main-es2015.js","sourcesContent":["import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LayoutModule } from './layout/layout.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    LayoutModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'drawing-board';\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { CommanService } from 'src/app/services/comman.service';\nimport { ConstantPool } from '@angular/compiler';\n\n@Component({\n  selector: 'app-drawing-board-component',\n  templateUrl: './drawing-board-component.component.html',\n  styleUrls: ['./drawing-board-component.component.scss']\n})\nexport class DrawingBoardComponentComponent implements OnInit {\n\n  @Input('strokColor') public globalColor;\n  drawType: string = 'path';\n  svgPath: string = 'http://www.w3.org/2000/svg';\n  undoPath = [];\n\n  constructor(public _commanService: CommanService) { }\n\n  ngOnInit() {\n    let svgBoard: SVGSVGElement = <any>document.getElementById('svgBoard');\n    this.undoPath = [];\n\n    //get co-ordinates of lines\n    const svgPoint = (elem, x, y) => {\n      let p = svgBoard.createSVGPoint();\n      p.x = x;\n      p.y = y;\n      return p.matrixTransform(elem.getScreenCTM().inverse());\n    }\n\n    //check mouse over the pallet\n    svgBoard.addEventListener('mouseover', (event) => {\n      if (this._commanService.penStatus) {\n        svgBoard.style.cursor = 'crosshair';\n      } else {\n        svgBoard.style.cursor = 'default';\n      }\n    });\n\n    //call event when mouse down on pallet\n    svgBoard.addEventListener('mousedown', (event) => {\n      const path = document.createElementNS(this.svgPath, this.drawType);\n      let points = [];\n\n      //function to draw lines\n      const drawLine = (e) => {\n        let color = this._commanService.globalColor;\n        let p = svgPoint(svgBoard, e.clientX, e.clientY);\n        points.push(p.x.toString());\n        points.push(p.y.toString());\n        path.setAttributeNS(null, 'd', 'M' + points.toString());\n        path.setAttributeNS(null, \"stroke\", color);\n        path.setAttributeNS(null, 'stroke-width', '2');\n        path.setAttributeNS(null, 'fill', 'none');\n        svgBoard.appendChild(path);\n      }\n\n      //function call when mouse up\n      const endDraw = (e) => {\n        svgBoard.removeEventListener('mousemove', drawLine);\n        svgBoard.removeEventListener('mouseup', endDraw);\n      }\n\n      //check pen is seleted or not\n      if (this._commanService.penStatus) {\n        svgBoard.addEventListener('mousemove', drawLine);\n        svgBoard.addEventListener('mouseup', endDraw);\n      }\n    });\n  }\n\n  ngDoCheck() {\n    //check user click on eraser\n    if (this._commanService.eraserStatus) {\n      let svgBoard: SVGSVGElement = <any>document.getElementById('svgBoard');\n      svgBoard.querySelectorAll(this.drawType).forEach(e => {\n          e.parentNode.removeChild(e);\n          this.undoPath.push(e);\n        }\n      );\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommanService {\n\n  globalColor: string = '#000';\n  penStatus: boolean = false;\n  eraserStatus: boolean = false;\n\n  constructor() { }\n}\n","<div class=\"boardContainer\">\n    <h4>Drawing Board</h4>\n    <svg id=\"svgBoard\">\n\n    </svg>\n</div>","import { Component, OnInit, ViewChild, ElementRef, AfterViewInit, Input } from '@angular/core';\nimport { CommanService } from 'src/app/services/comman.service';\n\n@Component({\n  selector: 'app-tool-bar-component',\n  templateUrl: './tool-bar-component.component.html',\n  styleUrls: ['./tool-bar-component.component.scss']\n})\nexport class ToolBarComponentComponent implements AfterViewInit {\n\n  constructor(public _commanService: CommanService) { }\n\n  ngAfterViewInit() {\n  }\n\n  getColor(color) {\n    this.resetAll();\n    this._commanService.globalColor = color;\n    this._commanService.penStatus = true;\n  }\n\n  getPen(color) {\n    this.resetAll();\n    this._commanService.globalColor = color;\n    this._commanService.penStatus = true;\n  }\n\n  getEraser(color) {\n    this.resetAll();\n    this._commanService.globalColor = color;\n    this._commanService.eraserStatus = true;\n  }\n\n  resetAll() {\n    this._commanService.penStatus = false;\n    this._commanService.eraserStatus = false;\n  }\n\n}\n","<div class=\"toolbarComponent\">\n    <h4>Toolbar</h4>\n    <div class=\"tools\">\n        <canvas class=\"pen\" (click)=\"getPen('#000')\"></canvas>\n        <canvas class=\"blue\" (click)=\"getColor('#00F')\"></canvas>\n        <canvas class=\"green\" (click)=\"getColor('#0F0')\"></canvas>\n        <canvas class=\"orange\" (click)=\"getColor('#FFA500')\"></canvas>\n        <canvas class=\"eraser\" (click)=\"getEraser('#FFF')\"></canvas>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { CommanService } from 'src/app/services/comman.service';\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.scss']\n})\nexport class BoardComponent implements OnInit {\n\n  constructor(public _commanService: CommanService) { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"components\">\n    <div class=\"boardComponent\">\n        <app-drawing-board-component [strokColor]=\"_commanService.globalColor\"></app-drawing-board-component>\n    </div>\n    <div class=\"toolComponent\">\n        <app-tool-bar-component></app-tool-bar-component>\n    </div>\n</div>\n","<!--The content below is only a placeholder and can be replaced.-->\n\n<app-board></app-board>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { scrollPositionRestoration: 'enabled', useHash: true })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DrawingBoardComponentComponent } from './drawing-board-component/drawing-board-component.component';\n\n\n\n@NgModule({\n  declarations: [DrawingBoardComponentComponent],\n  imports: [\n    CommonModule\n  ],\n  exports:[DrawingBoardComponentComponent]\n})\nexport class DrawingBoardModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ToolBarComponentComponent } from './tool-bar-component/tool-bar-component.component';\n\n\n\n@NgModule({\n  declarations: [ToolBarComponentComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [ToolBarComponentComponent]\n})\nexport class ToolBarModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BoardComponent } from './board/board.component';\nimport { DrawingBoardModule } from '../drawing-board/drawing-board.module';\nimport { ToolBarModule } from '../tool-bar/tool-bar.module';\n\n\n\n@NgModule({\n  declarations: [BoardComponent],\n  imports: [CommonModule, \n    DrawingBoardModule,\n    ToolBarModule\n  ],\n  exports: [BoardComponent]\n})\nexport class LayoutModule { }\n\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":""}